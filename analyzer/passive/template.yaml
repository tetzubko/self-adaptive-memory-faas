AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template for Lambda Optimization Tool
Parameters:
  PartnerRole:
    Type: String
    Default: arn:aws:iam::385973373219:role/BasicLambda
Resources:
  functionsCollector:
    Type: AWS::Serverless::Function
    Properties:
      Handler: collect_functions.lambda_handler
      Runtime: python3.8
      CodeUri: collect_functions/
      Description: ''
      MemorySize: 512
      Timeout: 180
      Role: !Ref PartnerRole
      Tags:
        project: memoryConfiguration
      Environment:
        Variables:
          SQS_URL: !Ref functionsSqsQueue
          DB_NAME: !Ref analyzedFunctionsDB
  find_optimal_memory:
    Type: AWS::Serverless::Function
    Properties:
      Handler: find_optimal_memory.lambda_handler
      Runtime: python3.8
      CodeUri: find_optimal_memory/
      Description: ''
      MemorySize: 512
      Timeout: 600
      Role: !Ref PartnerRole
      Tags:
        project: memoryConfiguration
      Layers:
        - !Ref pandasLayer
        - arn:aws:lambda:eu-central-1:292169987271:layer:AWSLambda-Python38-SciPy1x:29
      Environment:
        Variables:
          DB_NAME: !Ref analyzedFunctionsDB
          SNS_ARN: !Ref notificationSNS
          ALGORITHM_ARN: !GetAtt optimizeCost.Arn
  optimizeCost:
    Type: AWS::Serverless::Function
    Properties:
      Handler: optimize_cost.lambda_handler
      Runtime: python3.8
      CodeUri: optimize_cost/
      Description: ''
      MemorySize: 512
      Timeout: 600
      Role: !Ref PartnerRole
      Tags:
        project: memoryConfiguration
      Layers:
        - !Ref pandasLayer
        - arn:aws:lambda:eu-central-1:292169987271:layer:AWSLambda-Python38-SciPy1x:29
      Environment:
        Variables:
          DB_NAME: !Ref analyzedFunctionsDB
          SNS_ARN: !Ref notificationSNS
  pandasLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: pandas
      Description: Pandas layer
      ContentUri: ./pandas
      CompatibleRuntimes:
        - python3.8
  analyzedFunctionsDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: analyzedFunctions
      AttributeDefinitions:
        - AttributeName: functionID
          AttributeType: S
      KeySchema:
        - AttributeName: functionID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  startAnalysisScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Invoke analysis event"
      ScheduleExpression: "rate(4 hours)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "functionsCollector"
              - "Arn"
          Id: "functionsCollector"
          Input: '{"stack_name":"UPP-Develop"}'

  permissionForScheduelerToInvokeCollectFunctionsLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "functionsCollector"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "startAnalysisScheduledRule"
          - "Arn"

  functionsSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: functionsQueue
      VisibilityTimeout : 600

  sqsAnalyzerTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: True
      EventSourceArn: !GetAtt functionsSqsQueue.Arn
      FunctionName: !GetAtt find_optimal_memory.Arn

  notificationSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: memoryUpdate

  subscriptionSNS:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: "tetiana.zubko@sap.com"
      TopicArn: !Ref notificationSNS